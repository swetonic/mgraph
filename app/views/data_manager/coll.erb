
<html lang="en">
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
   <%= javascript_include_tag 'coll.js', 'ext-js/ext-all.js', 'jquery.min', 'raphael-min.js', 'dracula_graffle.js', 'dracula_graph.js' %>
   <script src="http://d3js.org/d3.v2.js?2.9.1"></script>
   <style>

    .node {
      font: 10px sans-serif;
    }
    
    .link {
      stroke: steelblue;
      stroke-opacity: .4;
      fill: none;
    }
</style>

</head>
<body>
    
  <div id="container"></div>
  
  <div style="font-size:14px; padding: 10px 10px 10px 10px;">
    <div id="info">
    </div>

    <table cellspacing="10">
    <tr>
        <td>
            <div style="display:inline" id="musicianName"></div>'s collaborators <a href="javascript:" id="help">?</a>
            <img id="loader" style="display:none" src="/ajax-loader2.gif"/>
            <br>
            
            <a href="javascript:" id="change">edit</a>
        
            <div style="display:none" id="editBox">
                <input id="newName" type="text" value="type here"/> 
                <a href="javascript:redraw()">redraw</a>
            </div>
        </td>
        <td><div style="padding-left:40px;"></div></td>
        <td valign="top">
            <div id="tip-slider">max nodes</div>
        </td>
    </tr>
    </table>
    <div id="artistInfo" style="display:none; float:right;">
        artist info
    </div>

  </div>
  
  <div id="canvas"></div>

    <script type="text/javascript">
        var svg = null;
        var cluster = null;
        var maxNodes = 7;
        var musicianName = "<%= @name %>";
        var bundle = null;

        toggleEditBox = function() {
            $('#editBox').fadeToggle("slow", function() {
                $('#newName').focus();
            });
        }
        
        fetchMusicianCollaborators = function(name) {
            $('#newName').get(0).value = name
            updateMusicianName(name);
            redraw();
        }
        
        updateMusicianName = function(name) {
            musicianName = name;
            $('#musicianName').get(0).innerHTML = name;
        }

        updateCollaborators = function() {
            drawCollaborators(ajaxUrl(musicianName));
        }
        
        ajaxUrl = function(name) {
            var url = "/data_manager/coll_json?name=" + name + "&max_nodes=" + maxNodes;
            return url;
        }
        
        redraw = function() {
            $('#editBox').hide();
            var newName = $('#newName').get(0).value;
            updateMusicianName(newName);
            drawCollaborators(ajaxUrl(newName));
        }
        
        $('#change').click(function() { toggleEditBox(); });

        $('#newName').keydown(function(event) {
            if(event.which == 13) { //enter key
                var newName = $('#newName').get(0).value;
                if(newName.length > 0) {
                    redraw();
                }
            }
        });
        
        $('#help').click(function(event) {

            var helpText = $('#helpTextResource').get(0).innerHTML;
            $('#helpTextContainer').append("<div id=\"helpText\" class=\"help\">" + helpText + "</div>");
            
            var helpWindow = Ext.create('widget.window', {
                height: 280,
                width: 400,
                contentEl:'helpText',
                x: event.clientX,
                y: event.clientY,
                title: '',
                modal: true,
                draggable: false,
                closable: true,
                plain: true,
                layout: 'fit'
            });
            
            
            helpWindow.show();
        });


        drawCollaborators = function(url) {
            $.ajax(url, { 
                beforeSend: function(jqXHR, settings) {
                    $('#loader').show();
                },
                success: function(data, textStatus, jqXHR) {
                    $('#loader').hide();
                    var nodeCount = data.length;
                    console.log(data);
                    
                  var nodes = cluster(packages.root(data)),
                      links = packages.imports(nodes);
                
                  svg.selectAll(".link")
                      .data(bundle(links))
                    .enter().append("path")
                      .attr("class", "link")
                      .attr("d", line);
                
                  svg.selectAll(".node")
                      .data(nodes.filter(function(n) { return !n.children; }))
                    .enter().append("g")
                      .attr("class", "node")
                      .attr("transform", function(d) { return "rotate(" + (d.x - 90) + ")translate(" + d.y + ")"; })
                    .append("text")
                      .attr("dx", function(d) { return d.x < 180 ? 8 : -8; })
                      .attr("dy", ".31em")
                      .attr("text-anchor", function(d) { return d.x < 180 ? "start" : "end"; })
                      .attr("transform", function(d) { return d.x < 180 ? null : "rotate(180)"; })
                      .text(function(d) { return d.data.key; });
      
                    if(nodeCount == 0) {
                        $('#info').text("No Data");    
                    }
                    else {
                    }
                }
            });
        }
        
        
        $(document).ready(function() {
            var diameter = 960,
            radius = diameter / 2,
            innerRadius = radius - 120;
        
            cluster = d3.layout.cluster()
                .size([360, innerRadius])
                .sort(null)
                .value(function(d) { return d.size; });
            
            bundle = d3.layout.bundle();
            
            var line = d3.svg.line.radial()
                .interpolate("bundle")
                .tension(.85)
                .radius(function(d) { return d.y; })
                .angle(function(d) { return d.x / 180 * Math.PI; });

            svg = d3.select("body").append("svg")
                .attr("width", diameter)
                .attr("height", diameter)
              .append("g")
                .attr("transform", "translate(" + radius + "," + radius + ")");

            maxNodes = <%= @max_nodes %>;
            updateMusicianName(musicianName);
            drawCollaborators(ajaxUrl(musicianName));
            
        });


    </script>

<div id="helpTextContainer"></div>
    
<div id="helpTextResource" style="display:none;" class="help">
<p>
This application uses the allmusic.com API, supplied by <a href="http://developer.rovicorp.com/docs" target="_new">Rovi</a>.
The graph display code is provided by <a href="http://arborjs.org" target="_new2">arbor.js</a>
</p>
<p>
My motivation for this project was to answer the question "Who played with whom?" in the jazz world.
The graph is hardly a complete picture since I rely on allmusic.com's data.
</p> 
<p>The max nodes slider controls the number of primary nodes in the graph: these are drawn with black text. The nodes connected
to primary nodes are the musicians that played with the person named in the primary node.</p>
<p>You can type any name in the edit box, but it works best with jazz musicians because they often had so many collaborators.</p>
<p>There's at least one known bug, based on non-ascii characters returned by the Rovi API. If you find a bug, send me an <a href="mailto:swetonic@gmail.com?subject=I%20Saw%20Musician%20Graph">email</a>.</p>

</div>
    
    
    
</body>
</html>






